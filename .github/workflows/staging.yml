name: "saleor pipeline -staging"

# We need this pipeline to run on push, pull request, and workflow dispatch.
# This will allow us to test the pipeline before merging.
on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging
  workflow_dispatch:

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  API_IMAGE: saleor-api
  DASHBOARD_IMAGE: saleor-dashboard
  IMAGE_TAG: staging

jobs:
  analysis:
    name: "Build Images & Healthchecks"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          docker build -t $DOCKER_USERNAME/$API_IMAGE:$IMAGE_TAG $API_IMAGE
          docker build -t $DOCKER_USERNAME/$DASHBOARD_IMAGE:$IMAGE_TAG $DASHBOARD_IMAGE
          
      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Scan Docker Images
        run: |
          trivy image $DOCKER_USERNAME/$API_IMAGE:$IMAGE_TAG > api_security_scan.txt || true
          trivy image $DOCKER_USERNAME/$DASHBOARD_IMAGE:$IMAGE_TAG > dashboard_security_scan.txt || true
          echo "Security scan completed - check logs for results"
          cat api_security_scan.txt
          cat dashboard_security_scan.txt

      - name: Docker Compose Up Database
        run: docker compose up -d db
      
      # This little hack will ensure that the database
      # is ready before we run the migrations and create a superuser.
      - name: Migrations
        run: |
          echo "Waiting for database to be ready..."
          sleep 10        
          docker compose run --rm api python manage.py migrate --noinput
          docker compose run --rm api python manage.py populatedb --createsuperuser

      - name: Docker Compose Up
        run: docker compose up -d

      # This was the bane of my existence for a while but after countless attempts I finally got this to work.
      # Ultimately, the issue was that the database migrations are actually required for the endpoints
      # to work. The additional debug output will help us diagnose issues in the future.
      - name: Healthcheck
        timeout-minutes: 5
        run: |
          while true; do
            echo "\n--- Container Status ---"
            docker compose ps
            
            echo "\n--- Recent API Logs ---"
            docker compose logs --tail=20 api
            
            echo "\n--- Recent Dashboard Logs ---"
            docker compose logs --tail=10 dashboard
            
            echo "\n--- Database Status ---"
            docker compose logs --tail=10 db
            
            if [ "$(docker compose ps -a --format '{{json .}}' | jq -r 'select(.State == null or .State != "running" or (.Health != null and .Health != "healthy")) | .Name' | wc -l)" = "0" ]; then
              echo "All containers are healthy."
              break
            fi
            
            echo "\nWaiting for containers to be healthy..."
            sleep 10
          done

      - name: Docker Compose Down
        run: docker compose down

      # We only want to push the images if this is a push event, not a pull request.
      # Nafarious people can't use pull requests to push to Docker Hub.
      # If we push to Docker Hub in a pull request, then the images from THAT PR will be pushed
      # and not the images from the staging branch.
      - name: Push Docker Images
        if: github.event_name == 'push'
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $DOCKER_USERNAME/$API_IMAGE:$IMAGE_TAG
          docker push $DOCKER_USERNAME/$DASHBOARD_IMAGE:$IMAGE_TAG
