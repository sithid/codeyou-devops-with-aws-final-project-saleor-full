name: "saleor pipeline -staging"

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging
  workflow_dispatch:

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  API_IMAGE: saleor-api
  DASHBOARD_IMAGE: saleor-dashboard
  IMAGE_TAG: staging

jobs:
  analysis:
    name: "Build Images & Healthchecks"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          docker build -t $DOCKER_USERNAME/$API_IMAGE:$IMAGE_TAG $API_IMAGE
          docker build -t $DOCKER_USERNAME/$DASHBOARD_IMAGE:$IMAGE_TAG $DASHBOARD_IMAGE

      - name: Docker Compose Up Database
        run: docker compose up -d db
        
      - name: Migrations
        run: |
          echo "Waiting for database to be ready..."
          sleep 10        
          docker compose run --rm api python manage.py migrate --noinput
          docker compose run --rm api python manage.py populatedb --createsuperuser

      - name: Docker Compose Up
        run: docker compose up -d

      # After what feels like forever, and after countless attempts, I finally got this to work.
      # Ultimately, I think the issue was that the database migrations are actually required for the endpoints
      # to work.
      - name: Healthcheck
        timeout-minutes: 5
        run: |
          while true; do
            echo "\n--- Container Status ---"
            docker compose ps
            
            echo "\n--- Recent API Logs ---"
            docker compose logs --tail=20 api
            
            echo "\n--- Recent Dashboard Logs ---"
            docker compose logs --tail=10 dashboard
            
            echo "\n--- Database Status ---"
            docker compose logs --tail=10 db
            
            if [ "$(docker compose ps -a --format '{{json .}}' | jq -r 'select(.State == null or .State != "running" or (.Health != null and .Health != "healthy")) | .Name' | wc -l)" = "0" ]; then
              echo "All containers are healthy."
              break
            fi
            
            echo "\nWaiting for containers to be healthy..."
            sleep 10
          done

      - name: Docker Compose Down
        run: docker compose down

      - name: Push Docker Image
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $DOCKER_USERNAME/$API_IMAGE:$IMAGE_TAG
          docker push $DOCKER_USERNAME/$DASHBOARD_IMAGE:$IMAGE_TAG
