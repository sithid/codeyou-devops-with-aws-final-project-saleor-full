name: "saleor pipeline -production"

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  actions: read
  contents: read

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  API_IMAGE: saleor-api
  DASHBOARD_IMAGE: saleor-dashboard
  IMAGE_TAG: latest

jobs:
  verify-staging:
    name: "Verify Staging Status"
    runs-on: ubuntu-latest
    steps:
      - name: Staging Workflow Status
        uses: actions/github-script@v6
        with:
          script: |
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            console.log('Looking for staging workflow in:', owner, repo);
            
            try {
              // First, list all workflows
              const workflows = await github.rest.actions.listRepoWorkflows({
                owner: owner,
                repo: repo
              });
              
              console.log('Available workflows:', workflows.data.workflows.map(w => w.name));
              
              // Find the staging workflow
              const stagingWorkflow = workflows.data.workflows.find(w => w.name === 'saleor pipeline -staging');
              
              if (!stagingWorkflow) {
                core.setFailed('Could not find staging workflow');
                return;
              }
              
              console.log('Found staging workflow:', stagingWorkflow.id);
              
              // Now get the runs using the workflow ID
              const stagingWorkflows = await github.rest.actions.listWorkflowRuns({
                owner: owner,
                repo: repo,
                workflow_id: stagingWorkflow.id,
                branch: 'staging',
                per_page: 1
              });
              
              if (stagingWorkflows.data.workflow_runs.length === 0) {
                core.setFailed('No staging workflow runs found');
                return;
              }
              
              const latestRun = stagingWorkflows.data.workflow_runs[0];
              if (latestRun.conclusion !== 'success') {
                core.setFailed('Latest staging workflow did not succeed');
                return;
              }
            } catch (error) {
              console.log('Error details:', error);
              core.setFailed(`Failed to verify staging workflow: ${error.message}`);
            }

  build-and-deploy:
    name: "Build, Push, and Deploy"
    needs: verify-staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Build Docker Images
        run: |
          docker build -t $DOCKER_USERNAME/$API_IMAGE:$IMAGE_TAG $API_IMAGE
          docker build -t $DOCKER_USERNAME/$DASHBOARD_IMAGE:$IMAGE_TAG $DASHBOARD_IMAGE

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Scan Docker Images
        run: |
          trivy image $DOCKER_USERNAME/$API_IMAGE:$IMAGE_TAG > api_security_scan.txt || true
          trivy image $DOCKER_USERNAME/$DASHBOARD_IMAGE:$IMAGE_TAG > dashboard_security_scan.txt || true
          echo "Security scan completed - check logs for results"
          cat api_security_scan.txt
          cat dashboard_security_scan.txt

      - name: Push Docker Images
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $DOCKER_USERNAME/$API_IMAGE:$IMAGE_TAG
          docker push $DOCKER_USERNAME/$DASHBOARD_IMAGE:$IMAGE_TAG
